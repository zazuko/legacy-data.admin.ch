@base <http://data.admin.ch/rdf2h/matchers/> .
@prefix dadmin: <http://data.admin.ch/rdf2h/matchers/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix r2h: <http://rdf2h.github.io/2015/rdf2h#> .
@prefix dc: <http://purl.org/dc/elements/1.1/>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix zzm: <http://zz2h.zazukoians.org/modes/> .
@prefix zz2h: <http://zz2h.zazukoinas.org/ontology/> .
@prefix schema: <http://schema.org/> .
@prefix site: <http://schema.zazuko.com/site/> .
@prefix r2hp: <http://rdf2h.github.io/2015/rdf2h-points/> .
@prefix dc: <http://dublincore.org/2012/06/14/dcelements#>.
@prefix gont: <https://gont.ch/> .
@prefix mode: <http://zazukoians.github.org/rdf2h/modes#> .
@prefix dbo: <http://dbpedia.org/ontology/> .
@prefix generic: <http://zazukoians.org/2016/generic-rdf2h-matchers/> .


<page> a r2h:Matcher ;
  r2h:template [
    r2h:context zzm:FullPage;
    r2h:mustache '''
    {{{@prefix dadmin: <http://data.admin.ch/rdf2h/matchers/>}}}
    {{{:continue}}}
'''
  ];
    r2h:before generic:page.

<htmlHead> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object schema:WebPage
  ];
  r2h:template [
    r2h:context zzm:HtmlHead;
    r2h:mustache '''
      <meta name="viewport" content="width=device-width,initial-scale=1">
      <title>Linked Data for {{.}}</title>
      <link href="graph_files/main.css" media="screen, print" type="text/css" rel="stylesheet" />
      <link href="graph_files/98da0a4.css" media="screen, print" type="text/css" rel="stylesheet" />
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.6/css/bootstrap.min.css" type="text/css" />
      <link rel="stylesheet" href="css/main.css" type="text/css" />
'''
  ];
  r2h:before generic:htmlHead, <capsWebsite>.

<capsWebsite> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object schema:WebPage
  ];
  r2h:template [
    r2h:context zzm:HtmlBody;
    r2h:mustache '''

      <div class="row-fluid" id="top">
        <div id="federal-authorities-bar">
          <a href="http://www.admin.ch/?lang=de" title="Bundesverwaltung admin.ch">Bundesverwaltung admin.ch</a>
        </div>
      </div>

      <div id="header" class="row-fluid">
        <div id="brand">
          <div id="logo">
            <a class="logo" href="http://data.admin.ch/"><img alt="Startseite data.admin.ch" title="Startseite data.admin.ch" src="graph_files/admin-logo.png" /></a>
          </div>
          <div id="ogd-portal-description">
            <h2><a href="/">data.admin.ch</a></h2>
            <h3><a href="/">Linked Data Pilot</a></h3>
          </div>
        </div>

        <div id="menu">
          {{{:render site:hasMenu r2h:Website}}}
        </div>
      </div>

      <div id="intro">{{{:render site:hasIntro r2h:Website}}}</div>

      <div role="main" id="main">
        <div class="flash-messages"></div>
        <div id="boxes">
          {{{:render site:hasBoxLeft r2h:Website}}}
          {{{:render site:hasBoxRight r2h:Website}}}

          {{{:render site:hasContainer r2h:Website}}}
        </div>
      </div>

      {{{:continue r2h:Website}}}
    '''
  ];
  r2h:before <capsadmin>.

<capsadmin> a r2h:Matcher ;
  r2h:template [
    r2h:context zzm:HtmlBody;
    r2h:mustache '''<div id="header"><img src="/img/admin-logo.png" height="70px" align="left" vspace="15" hspace="10"><p align="right"><h2 align="right">data.admin.ch</h2></p><p align="right">
Linked Data Pilot</p></div>
        {{{:render . r2h:Default}}}<div id="footer">
            Powered by <a href="https://github.com/zazukoians/trifid-ld" style="color:white">TRIFID-LD</a><br/>
            Code on <a href="https://github.com/zazuko/data.admin.ch" style="color:white"><b>github</b></a>
        </div>'''
  ];
  r2h:before generic:catchall.

<menu> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object site:Menu
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:mustache '''
      <ul class="nav nav-pills menu-item">
        {{{schema:articleBody}}}
      </ul>
    '''
  ];
  r2h:before generic:catchall.


<intro> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object site:Intro
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:mustache '''
      <div id="tagline_header">
        <div id="tagline" class="row-fluid">
          <div class="tagtext-left">
            <h1>{{{site:title}}}</h1>
            <p style="font-size: 1.2em;">{{{schema:articleBody}}}</p>
          </div>
          <div class="tagtext-right">
            <h2>{{{site:sideTitle}}}</h2>
            {{{site:sideBody}}}
          </div>
        </div>
      </div>
    '''
  ];
  r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.


<content> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object site:DefaultContent
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:mustache '''
      <hr class="style-shadow"/>
      <div class="content">
	<h1>{{{site:title}}}</h1>
	<hr style="margin-top: 0px;"/>
	<p>{{{schema:articleBody}}}</p>
      </div>
    '''
  ];
  r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.


<box> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object site:Box
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:mustache '''
      <div class="panel panel-primary box-moving box-container">
        <div class="panel-heading"><h4>{{{site:title}}}</h4></div>
        <div class="panel-body">
          {{{schema:articleBody}}}
        </div>
      </div>
    '''
  ];
  r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.


<container> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object site:Container
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:mustache '''
      <div class="row-fluid participate spacing"></div>

      <div class="panel panel-primary box-container box-wrapper">
        <div class="panel-heading"><h4>{{{site:title}}}</h4></div>
        <div class="panel-body">
          {{{:render site:hasApplicationLeft}}}
          {{{:render site:hasApplicationRight}}}
        </div>
      </div>
    '''
  ];
  r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.


<application> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object site:Application
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:mustache '''
      <div class="panel panel-info box-moving box-container">
        <div class="panel-heading"><b>{{{site:title}}}</b></div>
        <div class="panel-body">
          {{{schema:articleBody}}}
        </div>
      </div>
    '''
  ];
  r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.

<footer> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate rdf:type;
    r2h:object site:Footer
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:mustache '''
      <footer class="footer">
        {{{schema:articleBody}}}
      </footer>
    '''
  ];
  r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.

<parts> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate schema:hasPart
  ];
  r2h:template [
    r2h:context r2h:Website;
    r2h:javaScript '''function(n) {
            var result = "";
            var parts = n.graphNode.out(RDF2h.resolveCurie("schema:hasPart")).toArray();
            parts.sort(function(a,b) {
               var dc = RDF2h.resolveCurie("schema:dateCreated");
               return - a.out(dc).toString().localeCompare(b.out(dc).toString());
            });
            parts.forEach(function(p) {
                result += n.rdf2h.render(n.graph, p.nodes()[0], n.context);
            });
            return result;
        }'''
  ];
  r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.

r2hp:generic r2h:before <muniheader> .

<muniheader> a r2h:Matcher ;
  r2h:triplePattern [
    r2h:subject r2h:this;
    r2h:predicate gont:municipalityVersion
  ];
  r2h:template [
    r2h:context r2h:Default;
    r2h:mustache '''
      <div id="sticky-anchor"></div>
      <div id="sticky" class="list-group" style="width: 100%;">
        <span class="list-group-item">
          <h4 class="list-group-item-heading" id="muniname">
            {{#gont:municipalityVersion}}
            <b class="municipalityName" style="display:none">
              <span resource="{{.}}" context="mode:Title" class="fetch">Municipality name should appear here</span>
            </b>
            {{/gont:municipalityVersion}}
          </h4>
          <p class="list-group-item-text">a {{#rdf:type}}<a href="{{.}}">{{.}}</a> {{/rdf:type}}</p>
        </span>
      </div>
      {{{:continue mode:MuniHeader}}}'''
  ];
  r2h:before generic:rdfTypes.

<http://zazukoians.org/2016/generic-rdf2h-matchers/rdfTypes> r2h:before <endMuniHeader>.

<endMuniHeader> a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate gont:municipalityVersion
    ];
    r2h:template [
        r2h:context mode:MuniHeader;
        r2h:mustache '''
        {{{:continue r2h:Default}}}
        '''
    ];
    r2h:before <versions>.


<versions> a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate gont:municipalityVersion;
    ];
    r2h:template [
        r2h:context r2h:Default;
        r2h:mustache '''
        {{{:continue}}}

        <div id="history" class="panel-group">
          <div class="panel panel-default">
            <div class="panel-heading">
              <h4 class="panel-title">History</h4>
            </div>
            <div id="collapseHistory" class="panel-collapse">
              <div class="panel-body">
                <div style="text-align:center;">
                  <h4>Navigate all the versions for this municipality</h4>
                  <ul class="pagination" id="version-navigation"></ul>
                </div>
                <div id="allVersions">
                  {{#gont:municipalityVersion}}
                  <div class="mVersion" style="display:none">
                    <span resource="{{.}}" context="mode:Details"
                    class="fetch">Municipality should appear here</span>
                  </div>
                  {{/gont:municipalityVersion}}
                </div>
              </div>
            </div>
          </div>
        </div>
        <script>
          function getVersion(n) {
            return $($('.mVersion')[n]);
          }
          function showDiv(n) {
            $(".mVersion").hide();
            getVersion(n).show();
            $('.versionPages').each(function(i, obj) {
              if (i===n) {
                $(".versionPages").removeClass('active');
                $(this).addClass('active');
              }
            });
          }
          window.ld2hRendered.then(function() {
            function getVersionYear(n) {
                return getVersion(n).find(".admissionDate").text().split("-")[0];
            }
            $('.mVersion').each(function(i, obj) {
              $("#version-navigation").append('<li class="versionPages"><a href="#" onClick="showDiv('+i+'); return false;">'+getVersionYear(i)+'</a></li>');
            });
            $("#history").show();
            $(".mVersion").last().show();
            $(".versionPages").last().addClass('active');
            $(".municipalityName").last().show();
          });
        </script>
'''
    ];
  r2h:before r2hp:fallback.


[ a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate rdf:type;
        r2h:object gont:MunicipalityVersion
    ];
    r2h:template [
        r2h:context mode:Title;
        r2h:mustache '''{{gont:longName}}'''
    ];
    r2h:template [
        r2h:context mode:Details;
        r2h:mustache '''<h3>Details for: <span class="versionName">{{gont:longName}}</span></h3>
        Admission date: <span resource="{{gont:admissionEvent}}" context="mode:DateOnly"
            class="fetch admissionDate">admission date should appear here</span><br/>
        {{{:continue mode:loopholeCaps}}}
'''
    ];
    r2h:before r2hp:specific;
    r2h:before <page>;
    r2h:before <headline>;
    r2h:before <endEscapeDadminCaps>;
].

<capsdadmin> r2h:before <endEscapeDadminCaps>.
<http://zazukoians.org/2016/generic-rdf2h-matchers/rdfTypes> r2h:before <endEscapeDadminCaps>.

<endEscapeDadminCaps> a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate rdf:type;
    ];
    r2h:template [
        r2h:context mode:loopholeCaps;
        r2h:mustache '''
        {{{:continue r2h:Default}}}
        '''
    ];
    r2h:before <http://zazukoians.org/2016/generic-rdf2h-matchers/catchall>.

[ a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate rdf:type;
        r2h:object gont:MunicipalityChangeEvent
    ];
    r2h:template [
        r2h:context mode:DateOnly;
        r2h:mustache '''{{gont:date}}'''
    ];
    r2h:before r2hp:specific;
    r2h:before <page>;
    r2h:before <headline>;
].

r2hp:average r2h:before <dbpediaAbstract> .

<dbpediaAbstract> a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate dbo:thumbnail;
    ];
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate dbo:abstract;
    ];
    r2h:template [
        r2h:context r2h:Default;
        r2h:mustache '''
        <div id="dbpediaAbstract" style="width:95%; margin:0 auto; padding: 1em 0 2em; overflow:hidden;" >
            <img src="{{dbo:thumbnail}}" width="10%" align="right" style="padding-left:1em" />
            {{#dbo:abstract}}
                <div lang="{{./dcterms:language}}" class="dbpediaAbstract" style="display:none" style="display:inline;">{{.}}</div>
            {{/dbo:abstract}}
        </div>

        <script>
            function chooseBestLanguageAlternative(langPreferences) {
                for (var i = 0; i <= langPreferences.length; i++) {
                    var found = 0;
                    $(".dbpediaAbstract").each(function(index, element) {
                        if (langPreferences[i] === element.lang.toLocaleLowerCase()) {
                            element.style = ""; //remove hidden
                            found = 1;
                        }
                    })
                    if (found)
                        break;
                }
            }

            var browserLanguage = window.navigator.userLanguage || window.navigator.language;
            chooseBestLanguageAlternative([browserLanguage,browserLanguage.split("-")[0],"en", "de", "fr", "it", "rm"]);

            /*var box = $(".panel-group").last();
            $("#dbpediaAbstract").prependTo(box);

            $(".panel-collapse").last().addClass("collapse");*/
        </script>
        {{{:render . mode:sameAsDetails}}}
        '''
    ]; r2h:before <dbpediaAbstractDetail>.

<dbpediaAbstractDetail> a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate dbo:thumbnail;
    ];
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate dbo:abstract;
    ];
    r2h:template [
        r2h:context mode:sameAsDetails;
        r2h:mustache '''

	<div class="panel-group">
	  <div class="panel panel-default">
	    <div class="panel-heading">
	      <h4 class="panel-title">
		<a class="collapsed" href="#continueDBpedia" data-toggle="collapse">more details</a>
	      </h4>
	    </div>
	    <div id="continueDBpedia" class="panel-collapse collapse">
	      <div class="panel-body">
		  {{{:continue r2h:Default}}}
	      </div>
	    </div>
	  </div>
	</div>
        '''
    ]; r2h:before r2hp:generic.

r2hp:specific r2h:before [ a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate gont:populationStatistics
    ];
    r2h:template [
        r2h:context r2h:Default;
        r2h:mustache '''
{{{:continue}}}
<b>Statistical data:</b><br/>
<div>
<div resource="{{.}}"
             graph="{{gont:populationStatistics}}"
                class="fetch">
                Age pyramid should appear here
        </div>
</div>
'''
    ];
    r2h:before r2hp:average;
].

<pyramid> a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate gont:populationSegment
    ];
    r2h:template [
        r2h:context r2h:Default;
        r2h:mustache '''
            <script>
                window.populationData = new Array();
            </script>
            {{{:continue}}}
            <div class="pyramid"></div>
            <script>
                System.import("//d3js.org/d3.v3.min.js").then(function(){
                    function displayPyramid() {
                        // SET UP DIMENSIONS
                        var w = 500,
                            h = 300;

                        // margin.middle is distance from center line to each y-axis
                        var margin = {
                          top: 20,
                          right: 20,
                          bottom: 24,
                          left: 20,
                          middle: 28
                        };

                        // the width of each side of the chart
                        var regionWidth = w/2 - margin.middle;

                        // these are the x-coordinates of the y-axes
                        var pointA = regionWidth,
                            pointB = w - regionWidth;


                        // GET THE TOTAL POPULATION SIZE AND CREATE A FUNCTION FOR RETURNING THE PERCENTAGE
                        var totalPopulation = d3.sum(window.populationData, function(d) { return d.male + d.female; }),
                            percentage = function(d) { return d / totalPopulation; };


                        // CREATE SVG
                        var svg = d3.select($('.pyramid').last().parent().get(0)).append('svg')
                          .attr('width', margin.left + w + margin.right)
                          .attr('height', margin.top + h + margin.bottom)
                          // ADD A GROUP FOR THE SPACE WITHIN THE MARGINS
                          .append('g')
                            .attr('transform', translation(margin.left, margin.top));

                        // find the maximum data value on either side
                        //  since this will be shared by both of the x-axes
                        var maxValue = Math.max(
                          d3.max(window.populationData, function(d) { return percentage(d.male); }),
                          d3.max(window.populationData, function(d) { return percentage(d.female); })
                        );

                        // SET UP SCALES

                        // the xScale goes from 0 to the width of a region
                        //  it will be reversed for the left x-axis
                        var xScale = d3.scale.linear()
                          .domain([0, maxValue])
                          .range([0, regionWidth])
                          .nice();

                        var xScaleLeft = d3.scale.linear()
                          .domain([0, maxValue])
                          .range([regionWidth, 0]);

                        var xScaleRight = d3.scale.linear()
                          .domain([0, maxValue])
                          .range([0, regionWidth]);

                        var yScale = d3.scale.ordinal()
                          .domain(window.populationData.map(function(d) { return d.group; }))
                          .rangeRoundBands([h,0], 0.1);


                        // SET UP AXES
                        var yAxisLeft = d3.svg.axis()
                          .scale(yScale)
                          .orient('right')
                          .tickSize(4,0)
                          .tickPadding(margin.middle-4);

                        var yAxisRight = d3.svg.axis()
                          .scale(yScale)
                          .orient('left')
                          .tickSize(4,0)
                          .tickFormat('');

                        var xAxisRight = d3.svg.axis()
                          .scale(xScale)
                          .orient('bottom')
                          .ticks(5)
                          .tickFormat(d3.format('%'));

                        var xAxisLeft = d3.svg.axis()
                          // REVERSE THE X-AXIS SCALE ON THE LEFT SIDE BY REVERSING THE RANGE
                          .scale(xScale.copy().range([pointA, 0]))
                          .orient('bottom')
                          .ticks(5)
                          .tickFormat(d3.format('%'));

                        // MAKE GROUPS FOR EACH SIDE OF CHART
                        // scale(-1,1) is used to reverse the left side so the bars grow left instead of right
                        var leftBarGroup = svg.append('g')
                          .attr('transform', translation(pointA, 0) + 'scale(-1,1)');
                        var rightBarGroup = svg.append('g')
                          .attr('transform', translation(pointB, 0));

                        // DRAW AXES
                        svg.append('g')
                          .attr('class', 'axis y left')
                          .attr('transform', translation(pointA, 0))
                          .call(yAxisLeft)
                          .selectAll('text')
                          .style('text-anchor', 'middle');

                        svg.append('g')
                          .attr('class', 'axis y right')
                          .attr('transform', translation(pointB, 0))
                          .call(yAxisRight);

                        svg.append('g')
                          .attr('class', 'axis x left')
                          .attr('transform', translation(0, h))
                          .call(xAxisLeft);

                        svg.append('g')
                          .attr('class', 'axis x right')
                          .attr('transform', translation(pointB, h))
                          .call(xAxisRight);

                        // DRAW BARS
                        leftBarGroup.selectAll('.bar.left')
                          .data(window.populationData)
                          .enter().append('rect')
                            .attr('class', 'bar left')
                            .attr('x', 0)
                            .attr('y', function(d) { return yScale(d.group); })
                            .attr('width', function(d) { return xScale(percentage(d.male)); })
                            .attr('height', yScale.rangeBand());

                        rightBarGroup.selectAll('.bar.right')
                          .data(window.populationData)
                          .enter().append('rect')
                            .attr('class', 'bar right')
                            .attr('x', 0)
                            .attr('y', function(d) { return yScale(d.group); })
                            .attr('width', function(d) { return xScale(percentage(d.female)); })
                            .attr('height', yScale.rangeBand());

                        leftBarGroup.append("text")
                            .attr('transform', translation(pointA, 0) + 'scale(-1,1)')
                            .attr("x", regionWidth/3)
                            .text("Male");

                        rightBarGroup.append("text")
                            .attr("x", regionWidth/2)
                            .text("Female");


                        // so sick of string concatenation for translations
                        function translation(x,y) {
                          return 'translate(' + x + ',' + y + ')';
                        }
                    };
                    displayPyramid();
                });
            </script>

            '''
    ];
    r2h:before <pyramidSorter>.

<pyramidSorter> r2h:before [ a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate gont:populationSegment
    ];
    r2h:template [
        r2h:context r2h:Default;
        r2h:javaScript '''function(n) {
            var result = "";
            var segments = n.graphNode.out(RDF2h.resolveCurie("gont:populationSegment")).toArray();
            segments.sort(function(a,b) {
               var fa = RDF2h.resolveCurie("gont:fromAge");
               return +a.out(fa) - +b.out(fa);
            });
            segments.forEach(function(s) {
                result += n.rdf2h.render(n.graph, s.nodes()[0], n.context);
            });
            return result;
        }'''
    ];
    r2h:before <segment>;
].

<segment> r2h:before [ a r2h:Matcher ;
    r2h:triplePattern [
        r2h:subject r2h:this;
        r2h:predicate gont:toAge
    ];
    r2h:template [
        r2h:context r2h:Default;
        r2h:mustache '''
<script>

window.populationData.push({
    group: '{{gont:fromAge}} - {{gont:toAge}}',
    male: {{gont:malePopulation}} ,
    female: {{gont:femalePopulation}}
});
</script>
'''
    ];
    r2h:before r2hp:specific;
].
